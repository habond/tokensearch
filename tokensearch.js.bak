(function(scope, $){
	'use strict';

	var db = [{id:1,label:'one'},{id:2,label:'two'},{id:3,label:'three'},{id:13,label:'thirteen'}];
	
	var tokensearch = function(anchor) {
		
		// State
		var inputText = "";
		var tokens = [];
		var suggestions = [],
			selectedSuggestionIndex = -1;
		
		// Build UI
		var wrapperNode = $('<div/>').addClass('ts-wrapper');
		var tokensNode = $('<div/>').addClass('ts-tokenlist');
		var inputsNode = $('<div/>').addClass('ts-inputwrapper');
		var inputNode = $('<input/>').addClass('ts-input');
		var suggestNode = $('<ul/>').addClass('ts-suggestlist');
				
		wrapperNode
		.append(tokensNode)
		.append(
			inputsNode
			.append(inputNode)
			.append(suggestNode)
		);
		
		$(anchor).replaceWith(wrapperNode);
		
		// Attach Events
		wrapperNode
		.on('click', function() {
			inputNode.focus();
		});
			
		inputNode
		.on('keyup', function(e) {
			if (event.which === 38 || event.which === 40)
				return;
			if(event.which === 8 && inputText === "") { // Backspace
				tokens.pop();
				updateTokenUI();
				return;
			}
			inputText = inputNode.val();
			if(inputText.length > 0) {
				var filtered = $(db).filter(function(){ 
					return this.label.indexOf(inputText) === 0;
				});
				suggestions = filtered;
				selectedSuggestionIndex = 0;
			} else {
				suggestions = [];
				selectedSuggestionIndex = -1;
			}
			updateSuggestionUI();
		})
		.on('keydown', function(e) {
			if(selectedSuggestionIndex < 0)
				return;
			if(event.which === 13) { // Enter
				e.preventDefault();
				if(selectedSuggestionIndex > -1) {
					tokens.push(suggestions[selectedSuggestionIndex]);
					inputNode.val("");
					suggestions = [];
					selectedSuggestionIndex = -1;
					updateTokenUI();
				}
			} else if (event.which === 38) { // Up
				e.preventDefault();
				selectedSuggestionIndex = (selectedSuggestionIndex - 1 + suggestions.length) % suggestions.length;
			} else if (event.which === 40) { // Down
				e.preventDefault();
				selectedSuggestionIndex = (selectedSuggestionIndex + 1) % suggestions.length;
			}
			updateSuggestionUI();
		});
		
		// Private Functions
		function updateSuggestionUI() {
			suggestNode.empty();
			if(suggestions.length <= 0)
				return;
			$(suggestions).each( function( idx, val ) {
				var suggestionNode = $('<li>' + val.label + '</li>');
				if(idx === selectedSuggestionIndex) {
					suggestionNode.addClass('ts-suggestlist-sel');
				}
				suggestionNode.on('click', function() {
					console.log(val);
				});
				suggestNode.append(suggestionNode);
			});
		}
	
		function updateTokenUI() {
			tokensNode.empty();
			if(tokens.length <= 0)
				return;
			$(tokens).each( function( idx, token ) {
				var text = token.label;
				var tokenNode = $('<div/>').addClass('ts-token');
				var tokenLabel = $('<div>'+text+'</div>').addClass('ts-tokenlabel');
				var tokenClose = $('<div>×</div>').addClass('ts-close');
				
				tokenNode.on('click', function() {
					console.log(text);
				});
				
				tokenClose.on('click', function() {
					var index = tokens.indexOf(token);
					tokens.splice(index,1);
					updateTokenUI();
				});
				
				tokenNode
				.append(tokenLabel)
				.append(tokenClose);
				
				tokensNode.append(tokenNode);
			});
		}
		
	}
	
	// Export
	scope.tokensearch = tokensearch;

}(window, $));